<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:deploy.properties</value>
		</property>
	</bean>
	
   <bean id="deployInfo" class="ssh.spring.DeployInfo"
		init-method="echoDeployInfo">
		<property name="uploadFilePath">
			<value>${upload.file.path}</value>
		</property>
		<property name="fileServerHost">
			<value>${file.http.server.host}</value>
		</property>	
		<property name="projectName">
			<value>${project.name}</value>
		</property>			
		
		<property name="desKey">
			<value>${DES.Key}</value>
		</property>	
		<property name="desModeAndPadding">
			<value>${DES.ModeAndPadding}</value>
		</property>			
			
		<property name="from">
			<value>${email.from}</value>
		</property>
		<property name="host">
			<value>${email.host}</value>
		</property>
		<property name="username">
			<value>${email.username}</value>
		</property>
		<property name="password">
			<value>${email.password}</value>
		</property>		
		<property name="language">
			<value>${language}</value>
		</property>
		
		<property name="adMaxSize">
			<value>${ad.maxSize}</value>
		</property>
		
	</bean>
	
	

	

	<!-- 注入数据源 
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="url">
			<value>${database.url}</value>
		</property>
		<property name="driverClassName">
			<value>${database.driver}</value>
		</property>
		<property name="username">
			<value>${database.user}</value>
		</property>
		<property name="password">
			<value>${database.password}</value>
		</property>
		<property name="maxActive">
			<value>${database.maxActive}</value>
		</property>
		<property name="maxIdle">
			<value>${database.maxIdle}</value>
		</property>
		<property name="maxWait">
			<value>${database.maxWait}</value>
		</property>

	</bean>-->

 <!-- c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass">
         	<value>${database.driver}</value>
     	</property>
     	<property name="jdbcUrl">
         	<value>${database.url}</value>
     	</property>
     	<property name="user">
         	<value>${database.user}</value>
     	</property>
     	<property name="password">
         	<value>${database.password}</value>
     	</property>
		<!--连接池中保留的最小连接数。-->
        <property name="minPoolSize">
            <value>5</value>
        </property>
 		<!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize">
            <value>30</value>
        </property>
 		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize">
            <value>10</value>
        </property>
 		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime">
            <value>60</value>
        </property>
 		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement">
            <value>5</value>
        </property>
 		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
		  属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
		  如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements">
            <value>3</value>
        </property>
 		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod">
            <value>60</value>
        </property>
 		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts">
            <value>30</value>
        </property>
 		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
		  保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
		  获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure">
            <value>true</value>
        </property>
 		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
		  时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
		  等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout">
            <value>false</value>
        </property>
    </bean>


	<!--Hibernate sessionFactory定义开始-->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/hibernate</value>
			</list>
		</property>
		<!--hibernate参数配置-->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${database.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				 <prop key="hibernate.jdbc.fetch_size">50</prop>
                 <prop key="hibernate.jdbc.batch_size">30</prop>                
                  
			</props>
		</property>
		
	</bean>
	<!--Hibernate sessionFactory定义结束-->

	<!--Hibernate模板定义-->
	<bean id="hibernateTemplate"
		class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>


	<!-- 配置Hibernate的事务管理器 -->
	<!-- 使用HibernateTransactionManager类，该类是PlatformTransactionManager 接口,针对采用Hibernate持久化连接的特定实现 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 配置一個事務模版 -->
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
	</bean>

	<!-- 事务拦截器 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!--  事务拦截器bean需要依赖注入一个事务管理器 -->
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<!--  下面定义事务传播属性-->
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- 定义BeanNameAutoProxyCreator-->
	<bean id="BeanNameAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<!--  指定对满足哪些bean name的bean自动生成业务代理-->
		<property name="beanNames">
			<list>
				<value>transManager</value>
			</list>			
		</property>
		 
		<!--  下面定义BeanNameAutoProxyCreator所需的事务拦截器-->
		<property name="interceptorNames">
			<list>
				<!-- 此处可增加其他新的Interceptor -->
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	
	<!-- 基礎service -->
	<bean id="baseDao"
		class="ssh.hibernate.dao.impl.BaseDaoImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<!-- 事務糢版 -->
	<bean id="transTemplate" abstract="true" lazy-init="true">
		<property name="baseDao">
			<ref bean="baseDao" />
		</property>
	</bean>

	<!-- 事務 -->
	<bean id="transManager"
		class="ssh.hibernate.dao.impl.TransManagerImpl"
		parent="transTemplate" />

</beans>